macro ?!
    purge ?
    local out, file
    calminstruction out.number number*, mindigits: 1, base: 10
        proxy digit
        local place
        check number < 0
        jno positive
        execute =db? '-'
        compute number, -number
    positive:
        compute place, 1
    log:
        compute place, place * base
        compute mindigits, mindigits - 1
        check place > number & mindigits < 1
        jno log
    loop:
        compute place, place / base
        compute digit, (number / place) mod base + '0'
        check digit > '9'
        jno digit
        compute digit, digit - '0' - 10 + 'a'
    digit:
        execute =db? @digit
        check place > 1
        jyes loop
    end calminstruction
    calminstruction out.sld page*, address*, contents*
        proxy file
        local line
        compute line, __line__?
        execute =virtual? @file.=sld
        execute     =db? =__source__?, '|'
        once compute rootline, -1
        check __source__? = __file__?
        jno include
        compute rootline, line
        call out.number, line
        execute     =db? '||'
        jump finish
    include:
        call out.number, rootline
        execute     =db? '|', =__file__?, '|'
        call out.number, line
    finish:
        execute     =db? '|'
        call out.number, page
        execute     =db? '|'
        call out.number, address
        execute     =db? contents, 10
        execute =end? =virtual?
    end calminstruction
    calminstruction ? asm&
        proxy file, str
        local rest, page, address
        arrange str, asm
        stringify str
        once compute first, 1
        check first
        jno notfirst
        execute =virtual? =as? 'sld'
        execute @file.=sld::
        execute     =db? '|SLD.data.version|1', 10, \
                         '||K|KEYWORDS|WPMEM,LOGPOINT,ASSERTION', 10, \
                         =__source__?, '|-1||0|-1|-1|Z|pages.size:0,pages.count:0,slots.count:0', 10
        execute =end? =virtual?
        execute =virtual? =as? 'sym'
	execute @file.=sym::
        execute     =db ';No$Zx symbolic information file', 10, \
                        ';Generated by makesld.alm for fasmg-z80 - By Jacob Young', 10
        execute =end? =virtual?
        compute first, 0
    notfirst:
        compute page, $? metadata? 1
        compute address, $? scale? 0
        once arrange listing, '|T|', str
        call out.sld, page, address, listing
        assemble asm
        ; some lines start with a symbol
        arrange str, asm
        ; ignore everything after the first space
	match str= rest?, asm
        ; ignore everything after the first =
        match str==rest?, str
        ; ignore everything after the first :
        match str:rest?, str
        ; see if it is a symbol
        check definite? str
        jno nosymbol
        compute page, str metadata? 1
        compute address, str scale? 0
        stringify str
        once arrange label, '|L|,', str, ',,'
        call out.sld, page, address, label
        once compute hex, 16
        execute =virtual? @file.=sym
        once compute bytehexdigits, byte? shl? 1
        call out.number, page, bytehexdigits, hex
        execute     =db ':'
        once compute wordhexdigits, word? shl? 1
        call out.number, address, wordhexdigits, hex
        execute     =db ' ', @str, 10
        execute =end? =virtual?
    nosymbol:
    end calminstruction
end macro
